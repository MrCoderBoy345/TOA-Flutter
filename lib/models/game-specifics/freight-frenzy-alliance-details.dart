// Generated by https://quicktype.io
class FreightFrenzyAllianceDetails {
  FreightFrenzyAllianceDetails({
    this.barcodeElement1,
    this.barcodeElement2,
    this.carousel,
    this.navigated1,
    this.navigated2,
    this.navPts,
    this.autoBonus1,
    this.autoBonus2,
    this.autoBonusPoints,
    this.autoStorageFreight,
    this.autoFreight1,
    this.autoFreight2,
    this.autoFreight3,
    this.autoFreightPoints,
    this.teleStorageFreight,
    this.teleFreight1,
    this.teleFreight2,
    this.teleFreight3,
    this.teleAllianceHubPoints,
    this.teleSharedHubPoints,
    this.teleStoragePoints,
    this.sharedFreight,
    this.endDelivered,
    this.endDeliveredPoints,
    this.allianceBalanced,
    this.allianceBalancedPoints,
    this.sharedUnbalanced,
    this.sharedUnbalancedPoints,
    this.endParked1,
    this.endParked2,
    this.endParkedPoints,
    this.capped,
    this.cappedPoints,
    this.carouselPoints,
    this.totalPoints,
  });

  BarcodeElement barcodeElement1;
  BarcodeElement barcodeElement2;
  bool carousel;
  NavLocation navigated1;
  NavLocation navigated2;
  int navPts;
  bool autoBonus1;
  bool autoBonus2;
  int autoBonusPoints;
  int autoStorageFreight;
  int autoFreight1;
  int autoFreight2;
  int autoFreight3;
  int autoFreightPoints;
  int teleStorageFreight;
  int teleFreight1;
  int teleFreight2;
  int teleFreight3;
  int teleAllianceHubPoints;
  int teleSharedHubPoints;
  int teleStoragePoints;
  int sharedFreight;
  int endDelivered;
  int endDeliveredPoints;
  bool allianceBalanced;
  int allianceBalancedPoints;
  bool sharedUnbalanced;
  int sharedUnbalancedPoints;
  NavLocation endParked1;
  NavLocation endParked2;
  int endParkedPoints;
  int capped;
  int cappedPoints;
  int carouselPoints;
  int totalPoints;

  static FreightFrenzyAllianceDetails fromMap(map) {
    return FreightFrenzyAllianceDetails(
      barcodeElement1: _barcodeElementfromString(map['barcode_element_1']),
      barcodeElement2: _barcodeElementfromString(map['barcode_element_2']),
      carousel: map['carousel'],
      navigated1: _navLocationfromString(map['navigated_1']),
      navigated2: _navLocationfromString(map['auto_navigated_2']),
      navPts: map['auto_nav_points'],
      autoBonus1: map['auto_bonus_1'],
      autoBonus2: map['auto_bonus_2'],
      autoBonusPoints: map['auto_bonus_points'],
      autoStorageFreight: map['auto_storage_freight'],
      autoFreight1: map['auto_freight_1'],
      autoFreight2: map['auto_freight_2'],
      autoFreight3: map['auto_freight_3'],
      autoFreightPoints: map['auto_freight_points'],
      teleStorageFreight: map['tele_storage_freight'],
      teleFreight1: map['tele_freight_1'],
      teleFreight2: map['tele_freight_2'],
      teleFreight3: map['tele_freight_3'],
      teleAllianceHubPoints: map['tele_alliance_hub_points'],
      teleSharedHubPoints: map['tele_shared_hub_points'],
      teleStoragePoints: map['tele_storage_points'],
      sharedFreight: map['shared_freight'],
      endDelivered: map['end_delivered'],
      endDeliveredPoints: map['end_delivered_points'],
      allianceBalanced: map['alliance_balanced'],
      allianceBalancedPoints: map['alliance_balanced_points'],
      sharedUnbalanced: map['shared_unbalanced'],
      sharedUnbalancedPoints: map['shared_unbalanced_points'],
      endParked1: _navLocationfromString(map['end_parked_1']),
      endParked2: _navLocationfromString(map['end_parked_2']),
      endParkedPoints: map['end_parked_points'],
      capped: map['capped'],
      cappedPoints: map['capped_points'],
      carouselPoints: int.parse(map['carousel_points']),
      totalPoints: map['total_points'],
    );
  }
}

enum NavLocation {
  NONE,
  IN_STORAGE,
  IN_WAREHOUSE,
  COMPLETELY_IN_STORAGE,
  COMPLETELY_IN_WAREHOUSE,

}

NavLocation _navLocationfromString(String str) {
  NavLocation.values.forEach((element) {
    if (element.toString().split('.')[1] == str) {
      return element;
    }
  });
}

enum BarcodeElement { DUCK, TEAM_SHIPPING_ELEMENT }

BarcodeElement _barcodeElementfromString(String str) {
  BarcodeElement.values.forEach((element) {
    if (element.toString().split('.')[1] == str) {
      return element;
    }
  });
}
